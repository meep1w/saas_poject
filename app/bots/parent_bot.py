# app/bots/parent_bot.py
from __future__ import annotations

import asyncio
import html
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramForbiddenError

from sqlalchemy import select, func

from app.settings import settings
from app.db import SessionLocal
from app.models import (
    Tenant, UserAccess, Event,
    ContentOverride, UserLang, UserState,
)

router = Router()

# ----------------- GA / –¥–µ–ø–ª–æ–π / —Å–µ—Ä–≤–∏—Å—ã -----------------
REPO_DIR = "/opt/pocket_saas"                 # —Ä–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ –¥–µ–ø–ª–æ–π-—Å–∫—Ä–∏–ø—Ç—É –Ω—É–∂–Ω–∞)
DEPLOY_CMD = "/usr/local/bin/pocket_deploy"   # —Ç–≤–æ–π –¥–µ–ø–ª–æ–π-—Å–∫—Ä–∏–ø—Ç
CHILD_SERVICE = "pocket-children"             # systemd unit —Å –¥–µ—Ç—Å–∫–∏–º–∏ –±–æ—Ç–∞–º–∏

PAGE_SIZE = 8


async def _run(cmd: str, cwd: str | None = None) -> tuple[int, str]:
    """–ó–∞–ø—É—Å–∫ shell-–∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç (–∫–æ–¥_–≤—ã—Ö–æ–¥–∞, stdout+stderr)."""
    proc = await asyncio.create_subprocess_shell(
        cmd, cwd=cwd,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.STDOUT,
    )
    out, _ = await proc.communicate()
    text = out.decode(errors="ignore") if out else ""
    return proc.returncode, text


def _is_ga(uid: int) -> bool:
    return uid in set(settings.GA_ADMIN_IDS or [])


def _fmt_money(x: float | int | None) -> str:
    try:
        val = float(x or 0)
        return f"${int(val)}" if abs(val - int(val)) < 1e-9 else f"${val:.2f}"
    except Exception:
        return "$0"


# ----------------- –æ–±—ã—á–Ω–æ–µ /start + –ø—Ä–∏–≤—è–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ -----------------
WELCOME_OK_RU = (
    "–ü—Ä–∏–≤–µ—Ç! –í–∏–∂—É —Ç—ã –∏–∑ –ø—Ä–∏–≤–∞—Ç–∫–∏ ‚Äî –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.\n\n"
    "–û—Ç–ø—Ä–∞–≤—å API-—Ç–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å.\n"
    "–í–∞–∂–Ω–æ: –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–æ–ª—å–∫–æ <b>1 –±–æ—Ç–∞</b>."
)
WELCOME_NO_RU = (
    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–æ–µ–π –ø—Ä–∏–≤–∞—Ç–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
)


@router.message(Command("start"))
async def on_start(m: Message):
    user_id = m.from_user.id
    try:
        member = await m.bot.get_chat_member(settings.PRIVATE_CHANNEL_ID, user_id)
        status = getattr(member, "status", None)
        if status in {"creator", "administrator", "member"}:
            await m.answer(WELCOME_OK_RU)
        else:
            await m.answer(WELCOME_NO_RU)
            return
    except TelegramForbiddenError:
        await m.answer("–Ø –Ω–µ –∞–¥–º–∏–Ω –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        return
    except Exception:
        # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ PRIVATE_CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        await m.answer(WELCOME_NO_RU)
        return

    async with SessionLocal() as s:
        res = await s.execute(select(Tenant).where(Tenant.owner_telegram_id == user_id))
        tenant = res.scalar_one_or_none()
        if tenant and tenant.bot_username:
            await m.answer(
                f"–£ –≤–∞—Å —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –±–æ—Ç @{tenant.bot_username}. "
                f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —Å–¥–µ–ª–∞–µ–º –∑–∞–º–µ–Ω—É: —Å—Ç–∞—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á—ë–Ω."
            )


@router.message(F.text.regexp(r"^\d{6,}:[A-Za-z0-9_-]{20,}$"))
async def on_token(m: Message):
    token = (m.text or "").strip()
    user_id = m.from_user.id

    test_bot = Bot(token, default=DefaultBotProperties(parse_mode="HTML"))
    try:
        me = await test_bot.get_me()
    except Exception:
        await m.answer("–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        await test_bot.session.close()
        return

    username = me.username or ""
    await test_bot.session.close()

    async with SessionLocal() as s:
        res = await s.execute(select(Tenant).where(Tenant.owner_telegram_id == user_id))
        tenant = res.scalar_one_or_none()
        if tenant is None:
            tenant = Tenant(
                owner_telegram_id=user_id,
                bot_token=token,
                bot_username=username,
                is_active=True,
            )
            s.add(tenant)
        else:
            tenant.bot_token = token
            tenant.bot_username = username
            tenant.is_active = True
        await s.commit()

    link = f"https://t.me/{username}" if username else "https://t.me/"
    await m.answer(
        "–í–∞—à –±–æ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–∂–µ —Ç–∞–º: "
        f"{link}"
    )


# ----------------- –°–≤–µ—Ä—Ö-–∞–¥–º–∏–Ω–∫–∞ /ga -----------------
def _kb_ga_home(tenants, page: int, more: bool) -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    # –≤–µ—Ä—Ö–Ω–∏–π —Ä—è–¥: –î–µ–ø–ª–æ–π / –†–µ—Å—Ç–∞—Ä—Ç
    rows.append([
        InlineKeyboardButton(text="üöÄ –î–µ–ø–ª–æ–π", callback_data="ga:deploy"),
        InlineKeyboardButton(text="üîÑ –†–µ—Å—Ç–∞—Ä—Ç –¥–µ—Ç–µ–π", callback_data="ga:restart_children"),
    ])
    # —Å–ø–∏—Å–æ–∫ —Ç–µ–Ω–∞–Ω—Ç–æ–≤
    for t in tenants:
        name = f"@{t.bot_username}" if t.bot_username else f"id={t.id}"
        badge = "üü¢" if t.is_active else "‚è∏"
        rows.append([InlineKeyboardButton(text=f"{badge} –¢–µ–Ω–∞–Ω—Ç #{t.id} {name}", callback_data=f"ga:t:{t.id}")])
    # –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"ga:home:{page-1}"))
    if more:
        nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"ga:home:{page+1}"))
    if nav:
        rows.append(nav)
    return InlineKeyboardMarkup(inline_keyboard=rows)


def _kb_tenant_card(t: Tenant) -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    if t.is_active:
        rows.append([InlineKeyboardButton(text="‚è∏ –ü–∞—É–∑–∞", callback_data=f"ga:t:pause:{t.id}")])
    else:
        rows.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", callback_data=f"ga:t:start:{t.id}")])
    rows.append([InlineKeyboardButton(text="üîÅ –†–µ—Å—Ç–∞—Ä—Ç –¥–µ—Ç–µ–π", callback_data=f"ga:t:restart:{t.id}")])
    # –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
    rows.append([InlineKeyboardButton(text="üßπ –£–¥–∞–ª–∏—Ç—å", callback_data=f"ga:t:delete_confirm:{t.id}")])
    rows.append([InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="ga:home:0")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


@router.message(Command("ga"))
async def ga_entry(m: Message):
    if not _is_ga(m.from_user.id):
        return
    await _ga_home(m)


async def _ga_home(m_or_c: Message | CallbackQuery, page: int = 0):
    # —Å—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    async with SessionLocal() as s:
        t_count = (await s.execute(select(func.count()).select_from(Tenant))).scalar() or 0
        u_total = (await s.execute(select(func.count()).select_from(UserAccess))).scalar() or 0
        u_reg = (await s.execute(
            select(func.count()).select_from(UserAccess).where(UserAccess.is_registered == True)
        )).scalar() or 0
        u_dep = (await s.execute(
            select(func.count()).select_from(UserAccess).where(UserAccess.has_deposit == True)
        )).scalar() or 0
        u_vip = (await s.execute(
            select(func.count()).select_from(UserAccess).where(UserAccess.is_platinum == True)
        )).scalar() or 0
        dep_sum = (await s.execute(
            select(func.coalesce(func.sum(Event.amount), 0.0)).where(Event.kind.in_(("ftd", "rd")))
        )).scalar() or 0.0

        res = await s.execute(
            select(Tenant).order_by(Tenant.id.asc()).offset(page * PAGE_SIZE).limit(PAGE_SIZE)
        )
        tenants = res.scalars().all()
        more = (page + 1) * PAGE_SIZE < t_count

    txt = (
        "üìä <b>–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        f"–¢–µ–Ω–∞–Ω—Ç–æ–≤: {t_count}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {u_total}\n"
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {u_reg}\n"
        f"–° –¥–µ–ø–æ–∑–∏—Ç–æ–º: {u_dep}\n"
        f"Platinum: {u_vip}\n"
        f"–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {_fmt_money(dep_sum)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–Ω–∞–Ω—Ç–∞:"
    )
    kb = _kb_ga_home(tenants, page, more)

    if isinstance(m_or_c, CallbackQuery):
        await m_or_c.message.edit_text(txt, reply_markup=kb)
        await m_or_c.answer()
    else:
        await m_or_c.answer(txt, reply_markup=kb)


@router.callback_query(F.data.startswith("ga:home:"))
async def ga_home_cb(c: CallbackQuery):
    if not _is_ga(c.from_user.id):
        return
    page = int(c.data.split(":")[2])
    await _ga_home(c, page=page)


# ---- Deploy / Restart (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ) ----
@router.callback_query(F.data == "ga:deploy")
async def ga_deploy(c: CallbackQuery):
    if not _is_ga(c.from_user.id):
        return
    await c.answer("–ó–∞–ø—É—Å–∫–∞—é –¥–µ–ø–ª–æ–π‚Ä¶")
    code, out = await _run(DEPLOY_CMD, cwd=REPO_DIR)
    tail = html.escape("\n".join(out.strip().splitlines()[-25:]))

    # -15 == SIGTERM ‚Üí —Å–∫—Ä–∏–ø—Ç —É–±–∏—Ç —Ä–µ—Å—Ç–∞—Ä—Ç–æ–º —Å–µ—Ä–≤–∏—Å–æ–≤ ‚Äî —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ
    if code in (0, -15):
        await c.message.answer(f"‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω.\n<pre>{tail}</pre>")
    else:
        await c.message.answer(f"‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (exit {code}).\n<pre>{tail}</pre>")


@router.callback_query(F.data == "ga:restart_children")
async def ga_restart_children(c: CallbackQuery):
    if not _is_ga(c.from_user.id):
        return
    await c.answer("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –¥–µ—Ç–µ–π‚Ä¶")
    code, out = await _run(f"systemctl restart {CHILD_SERVICE}")
    if code == 0:
        await c.message.answer("‚úÖ –î–µ—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã.")
    else:
        tail = html.escape("\n".join(out.strip().splitlines()[-20:]))
        await c.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å: exit {code}\n<pre>{tail}</pre>")


# ---- –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–µ–Ω–∞–Ω—Ç–∞ ----
async def _tenant_stats(tid: int) -> dict:
    async with SessionLocal() as s:
        total = (await s.execute(select(func.count()).select_from(UserAccess).where(UserAccess.tenant_id == tid))).scalar() or 0
        regs = (await s.execute(select(func.count()).select_from(UserAccess).where(UserAccess.tenant_id == tid, UserAccess.is_registered == True))).scalar() or 0
        deps = (await s.execute(select(func.count()).select_from(UserAccess).where(UserAccess.tenant_id == tid, UserAccess.has_deposit == True))).scalar() or 0
        plats = (await s.execute(select(func.count()).select_from(UserAccess).where(UserAccess.tenant_id == tid, UserAccess.is_platinum == True))).scalar() or 0
        dep_sum = (await s.execute(
            select(func.coalesce(func.sum(Event.amount), 0.0)).where(Event.tenant_id == tid, Event.kind.in_(("ftd", "rd")))
        )).scalar() or 0.0
    return {"total": total, "regs": regs, "deps": deps, "plats": plats, "sum": dep_sum}


def _format_tenant_card(t: Tenant, st: dict) -> str:
    lines = [
        f"üì¶ <b>–¢–µ–Ω–∞–Ω—Ç #{t.id}</b>",
        f"–ò–º—è: {t.bot_username or '‚Äî'}",
        f"–°—Ç–∞—Ç—É—Å: {'ACTIVE' if t.is_active else 'PAUSED'}",
        f"Admin ID: {t.owner_telegram_id}",
        f"–ö–∞–Ω–∞–ª (–æ–±—è–∑.): {t.gate_channel_id or 'None'} / {t.gate_channel_url or 'None'}",
        f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞: {t.support_url or 'None'}",
        f"–ü–æ—Ä–æ–≥ Platinum: {int(t.platinum_threshold_usd or 0)}",
        "",
        "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>",
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {st['total']}",
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {st['regs']}",
        f"–° –¥–µ–ø–æ–∑–∏—Ç–æ–º: {st['deps']}",
        f"Platinum: {st['plats']}",
        f"–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {_fmt_money(st['sum'])}",
    ]
    return "\n".join(lines)


async def _show_tenant_card(c: CallbackQuery, tenant_id: int):
    async with SessionLocal() as s:
        res = await s.execute(select(Tenant).where(Tenant.id == tenant_id))
        t = res.scalar_one_or_none()
    if not t:
        await c.answer("–¢–µ–Ω–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    st = await _tenant_stats(tenant_id)
    txt = _format_tenant_card(t, st)
    await c.message.edit_text(txt, reply_markup=_kb_tenant_card(t))
    await c.answer()


@router.callback_query(
    F.data.startswith("ga:t:")
    & ~F.data.contains(":start:")
    & ~F.data.contains(":pause:")
    & ~F.data.contains(":restart:")
    & ~F.data.contains(":delete")
)
async def ga_tenant_open(c: CallbackQuery):
    if not _is_ga(c.from_user.id):
        return
    tid = int(c.data.split(":")[2])
    await _show_tenant_card(c, tid)


@router.callback_query(F.data.startswith("ga:t:start:"))
async def ga_tenant_start(c: CallbackQuery):
    if not _is_ga(c.from_user.id):
        return
    tid = int(c.data.split(":")[3])
    async with SessionLocal() as s:
        await s.execute(Tenant.__table__.update().where(Tenant.id == tid).values(is_active=True))
        await s.commit()
    await _run(f"systemctl restart {CHILD_SERVICE}")
    await c.answer("–í–∫–ª—é—á–µ–Ω –∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã –¥–µ—Ç–∏")
    await _show_tenant_card(c, tid)


@router.callback_query(F.data.startswith("ga:t:pause:"))
async def ga_tenant_pause(c: CallbackQuery):
    if not _is_ga(c.from_user.id):
        return
    tid = int(c.data.split(":")[3])
    async with SessionLocal() as s:
        await s.execute(Tenant.__table__.update().where(Tenant.id == tid).values(is_active=False))
        await s.commit()
    await _run(f"systemctl restart {CHILD_SERVICE}")
    await c.answer("–ü–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É")
    await _show_tenant_card(c, tid)


@router.callback_query(F.data.startswith("ga:t:restart:"))
async def ga_tenant_restart(c: CallbackQuery):
    if not _is_ga(c.from_user.id):
        return
    tid = int(c.data.split(":")[3])
    await c.answer("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –¥–µ—Ç–µ–π‚Ä¶")
    await _run(f"systemctl restart {CHILD_SERVICE}")
    await _show_tenant_card(c, tid)


@router.callback_query(F.data.startswith("ga:t:delete_confirm:"))
async def ga_tenant_delete_confirm(c: CallbackQuery):
    if not _is_ga(c.from_user.id):
        return
    tid = int(c.data.split(":")[3])
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùóÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞", callback_data=f"ga:t:delete:{tid}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=f"ga:t:{tid}")],
    ])
    await c.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Å–∞–º —Ç–µ–Ω–∞–Ω—Ç –∏ <b>–≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b> (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Å–æ–±—ã—Ç–∏—è, —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ–Ω—Ç–µ–Ω—Ç).",
        reply_markup=kb
    )
    await c.answer()


@router.callback_query(F.data.startswith("ga:t:delete:"))
async def ga_tenant_delete(c: CallbackQuery):
    if not _is_ga(c.from_user.id):
        return
    tid = int(c.data.split(":")[3])

    # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–Ω–∞–Ω—Ç–∞
    async with SessionLocal() as s:
        await s.execute(UserState.__table__.delete().where(UserState.tenant_id == tid))
        await s.execute(UserLang.__table__.delete().where(UserLang.tenant_id == tid))
        await s.execute(Event.__table__.delete().where(Event.tenant_id == tid))
        await s.execute(UserAccess.__table__.delete().where(UserAccess.tenant_id == tid))
        await s.execute(ContentOverride.__table__.delete().where(ContentOverride.tenant_id == tid))
        await s.execute(Tenant.__table__.delete().where(Tenant.id == tid))
        await s.commit()

    await _run(f"systemctl restart {CHILD_SERVICE}")
    await c.message.edit_text("üóë –¢–µ–Ω–∞–Ω—Ç –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –î–µ—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã.")
    await c.answer()


# ----------------- –†–∞–Ω–Ω–µ—Ä -----------------
async def run_parent():
    bot = Bot(settings.PARENT_BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)
